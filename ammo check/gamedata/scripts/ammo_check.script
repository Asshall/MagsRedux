-- locals --
local no_ammo_wpns = {
	wpn_binoc = true,
	wpn_binoc_inv = true,
	wpn_knife = true,
	wpn_knife2 = true,
	wpn_knife3 = true,
	wpn_knife4 = true,
	wpn_knife5 = true,
	wpn_axe = true,
	wpn_axe2 = true,
	wpn_axe3 = true,
	device_pda_1 = true,
	grenade_f1 = true,
	grenade_rgd5 = true,
	grenade_smoke = true,
}
local jammed_weapon = false

gc						 	= game.translate_string
print_dbg	 				= magazine_binder.print_dbg
get_data 				= magazine_binder.get_data
set_data 				= magazine_binder.set_data
is_supported_weapon			= magazine_binder.is_supported_weapon

function on_game_start()
	RegisterScriptCallback("on_key_press",on_key_press)
	RegisterScriptCallback("actor_on_weapon_jammed", weapon_jammed)
	RegisterScriptCallback("actor_on_weapon_reload", on_reload)
end

-- Script Callbacks --
function on_key_press(key)
	local bind = dik_to_bind(key)
    if (bind == key_bindings.kCUSTOM25) then
		checkAmmo()
	end
end

function weapon_jammed()
	jammed_weapon = true
end

function on_reload()
	jammed_weapon = false
end
	
-- Main function --
function checkAmmo()
	local weapon = db.actor:item_in_slot(db.actor:active_slot())
	
	-- ends if no weapon is in hand etc.
	if(weapon == nil or db.actor == nil or no_ammo_wpns[weapon:section()]) then return -1 end 
	
	local weaponId = weapon:id()
	
	local message = ""

	-- Checks if the weapon is a grenade (type 4) or bolt/bullet case (type 1)
	local weaponType = system_ini():r_u32(weapon:section(), "ef_weapon_type") 
	if (weaponType == 4 or weaponType == 1 or weaponType == nil) then
		actor_menu.set_msg(1, gc("st_ac_noAmmo"), 1)
		return
	end
	
	local currentState = weapon:get_state()
	
	if currentState == 0 then
		-- if magazine weapon
		local currentAmmo = weapon:get_ammo_in_magazine()
		if (currentAmmo == nil) then return end		
		
		local sec = weapon:section()
		
		if (jammed_weapon) then 
			message = game.translate_string("st_ac_jammed")
		elseif currentAmmo == 0 then
			if is_supported_weapon(sec) and get_data(weaponId) == nil then	
				message = gc("st_ac_noMag")
			else
				message = gc("st_ac_empty")
			end
		else
			local max_ammo = 0
			if is_supported_weapon(sec) then
				local mag_data = get_data(weaponId)
				print_dbg("checking for section %s", mag_data.section)
				max_ammo = SYS_GetParam(2, mag_data.section, "max_mag_size")
			else
				max_ammo = SYS_GetParam(2, sec, "ammo_mag_size")
			end
			local curAmmoPerc = currentAmmo/max_ammo
				
			if (curAmmoPerc == 1) then 
				message = game.translate_string("st_ac_full")
			elseif (curAmmoPerc < 1 and curAmmoPerc >= 0.8) then 
				message = game.translate_string("st_ac_nearly_full")
			elseif (curAmmoPerc < 0.8 and curAmmoPerc >= 0.6) then 
				message = game.translate_string("st_ac_more_half")
			elseif (curAmmoPerc < 0.6 and curAmmoPerc >= 0.45) then 
				message = game.translate_string("st_ac_about_half")
			elseif (curAmmoPerc < 0.45 and curAmmoPerc >= 0.25) then 
				message = game.translate_string("st_ac_less_half")
			elseif (curAmmoPerc < 0.25 and curAmmoPerc >= 0.001) then 
				message = game.translate_string("st_ac_near_empty")
			else
				message = game.translate_string("st_ac_empty")
			end	
		end
	end
	
	db.actor:hide_weapon()
	CreateTimeEvent(0,"showMessage",0.7,function() 
		actor_menu.set_msg(1, message, 1)
		return true
	end)
	
	CreateTimeEvent(0,"restore Weapon",1.5,function() 
		db.actor:restore_weapon()
		return true
	end)
end

