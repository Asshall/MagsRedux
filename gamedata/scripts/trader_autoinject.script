--[[
Wrapper class to let you autoinject things via monkey patch to all traders, respecting the restock time.
How to use: Monkey patch the update function here in your script.
ex:
TraderAuto = trader_autoinject.update
function trader_autoinject.update(npc)
    TraderAuto(npc)
    add_custom_crap(npc) -- you define this function ok
end

Some functions provided below for convenience.
Note: If you want to iterate NPC inventory to check for items, fire a time event to allow the items to register on new game.
--]] --


local tm_custom = {}
find = string.find
local function t2c(t)
	if not t then return nil end
	local ct = game.CTime()
	ct:set(t.Y,t.M,t.D,t.h,t.m,t.s,t.ms)
	return ct
end

local function c2t(ct)
	if not ct then return nil end
	-- printf('%s, %s',ct,type(ct))
	local Y, M, D, h, m, s, ms = 0, 0, 0, 0, 0, 0, 0
	Y, M, D, h, m, s, ms = ct:get(Y, M, D, h, m, s, ms)
	return { Y=Y, M=M, D=D, h=h, m=m, s=s, ms=ms }
end

TraderUpdate = trade_manager.update
function trade_manager.update(npc, force_refresh)
    TraderUpdate(npc, force_refresh)
    local id = npc:id()
    local restock_time = game_difficulties.get_eco_factor("restock") or 24
	if tm_custom[id] and (tm_custom[id] and game.get_game_time():diffSec(t2c(tm_custom[id])) < (restock_time * 3600))  then
		-- print_dbg("Not time to resupply yet!")
        return
	end
	tm_custom[id] = c2t(game.get_game_time())
    update(npc)
end

OnNpcDeath = trade_manager.on_npc_death
function trade_manager.on_npc_death(npc)
	if (npc) then
		tm_custom[npc:id()] = nil
	end
end

-- monkeypatch me
function update(npc)
end

-- util functions to help with monkey patching

function get_faction_goodwill(faction)
end

COMPANION = 0   -- companions got special trade logic, this is just to catch errors
MECHANIC = 1    -- mechanics/techs
BARMAN = 2      -- exclusive food suppliers like Spirit
MEDIC = 3       -- medics 
SUPPLIER = 4    -- everyone else that sells crap
-- return trader type as int, or nil if error
function get_trader_type(npc)
    local st = db.storage[npc:id()]
    
    local trader = false
    if npc:character_community() == "trader" or npc:clsid() == clsid.script_trader or npc:clsid() == clsid.trader then
        trader = true
    end
    if find(npc:section(),"trader") then
        trader = true
    end
    local cini = st.ini
    local logic = st.section_logic
    if not logic and not trader then return end
    local trade_logic = cini:r_string_ex(logic, "trade")
    if find(trade_logic, "companion") then
        return COMPANION
    elseif find(trade_logic, "trade_generic_mechanic") then
        return MECHANIC
    elseif find(trade_logic, "trade_generic_barman") then
        return BARMAN
    elseif find(trade_logic, "trade_generic_medic") then
        return MEDIC
    else
        return SUPPLIER
    end
end

-- return supply level of npc, like suppy_1, supply_2, etc
function supply_level(npc)
    local config = trade_manager.get_trade_profile(npc:id(), "cfg_ltx")
    
	local str = config:r_string_ex("trader", "buy_supplies")
	if not (str) then 
		return -- no buy_supplies this is normal
	end

	local condlist = xr_logic.parse_condlist(npc, "trader", "buy_supplies", str)
	str = condlist and xr_logic.pick_section_from_condlist(db.actor, npc, condlist)
    return str
end
function load_state(m_data)
    tm_custom = m_data.tm_custom or {}
end

function save_state(m_data)
    m_data.tm_custom = tm_custom
end
function on_game_start()
    RegisterScriptCallback("load_state",load_state)
    RegisterScriptCallback("save_state",save_state)
end